"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.accountsAddressesTotal = exports.accountsAddressesAssetsAll = exports.accountsAddressesAssets = exports.accountsAddressesAll = exports.accountsAddresses = exports.accountsRegistrationsAll = exports.accountsRegistrations = exports.accountsDelegationsAll = exports.accountsDelegations = exports.accountsMirsAll = exports.accountsMirs = exports.accountsWithdrawalsAll = exports.accountsWithdrawals = exports.accountsHistoryAll = exports.accountsHistory = exports.accountsRewardsAll = exports.accountsRewards = exports.accounts = void 0;
const utils_1 = require("../../../utils");
const errors_1 = require("../../../utils/errors");
async function accounts(stakeAddress) {
    return new Promise((resolve, reject) => {
        this.instance(`accounts/${stakeAddress}`)
            .then(resp => {
            resolve(resp.body);
        })
            .catch(err => reject((0, errors_1.handleError)(err)));
    });
}
exports.accounts = accounts;
async function accountsRewards(stakeAddress, pagination) {
    const paginationOptions = (0, utils_1.getPaginationOptions)(pagination);
    return new Promise((resolve, reject) => {
        this.instance(`accounts/${stakeAddress}/rewards`, {
            searchParams: {
                page: paginationOptions.page,
                count: paginationOptions.count,
                order: paginationOptions.order,
            },
        })
            .then(resp => {
            resolve(resp.body);
        })
            .catch(err => reject((0, errors_1.handleError)(err)));
    });
}
exports.accountsRewards = accountsRewards;
async function accountsRewardsAll(stakeAddress, allMethodOptions) {
    return (0, utils_1.paginateMethod)(pagination => this.accountsRewards(stakeAddress, pagination), allMethodOptions);
}
exports.accountsRewardsAll = accountsRewardsAll;
async function accountsHistory(stakeAddress, pagination) {
    const paginationOptions = (0, utils_1.getPaginationOptions)(pagination);
    return new Promise((resolve, reject) => {
        this.instance(`accounts/${stakeAddress}/history`, {
            searchParams: {
                page: paginationOptions.page,
                count: paginationOptions.count,
                order: paginationOptions.order,
            },
        })
            .then(resp => {
            resolve(resp.body);
        })
            .catch(err => reject((0, errors_1.handleError)(err)));
    });
}
exports.accountsHistory = accountsHistory;
async function accountsHistoryAll(stakeAddress, allMethodOptions) {
    return (0, utils_1.paginateMethod)(pagination => this.accountsHistory(stakeAddress, pagination), allMethodOptions);
}
exports.accountsHistoryAll = accountsHistoryAll;
async function accountsWithdrawals(stakeAddress, pagination) {
    const paginationOptions = (0, utils_1.getPaginationOptions)(pagination);
    return new Promise((resolve, reject) => {
        this.instance(`accounts/${stakeAddress}/withdrawals`, {
            searchParams: {
                page: paginationOptions.page,
                count: paginationOptions.count,
                order: paginationOptions.order,
            },
        })
            .then(resp => {
            resolve(resp.body);
        })
            .catch(err => reject((0, errors_1.handleError)(err)));
    });
}
exports.accountsWithdrawals = accountsWithdrawals;
async function accountsWithdrawalsAll(stakeAddress, allMethodOptions) {
    return (0, utils_1.paginateMethod)(pagination => this.accountsWithdrawals(stakeAddress, pagination), allMethodOptions);
}
exports.accountsWithdrawalsAll = accountsWithdrawalsAll;
async function accountsMirs(stakeAddress, pagination) {
    const paginationOptions = (0, utils_1.getPaginationOptions)(pagination);
    return new Promise((resolve, reject) => {
        this.instance(`accounts/${stakeAddress}/mirs`, {
            searchParams: {
                page: paginationOptions.page,
                count: paginationOptions.count,
                order: paginationOptions.order,
            },
        })
            .then(resp => {
            resolve(resp.body);
        })
            .catch(err => reject((0, errors_1.handleError)(err)));
    });
}
exports.accountsMirs = accountsMirs;
async function accountsMirsAll(stakeAddress, allMethodOptions) {
    return (0, utils_1.paginateMethod)(pagination => this.accountsMirs(stakeAddress, pagination), allMethodOptions);
}
exports.accountsMirsAll = accountsMirsAll;
async function accountsDelegations(stakeAddress, pagination) {
    const paginationOptions = (0, utils_1.getPaginationOptions)(pagination);
    return new Promise((resolve, reject) => {
        this.instance(`accounts/${stakeAddress}/delegations`, {
            searchParams: {
                page: paginationOptions.page,
                count: paginationOptions.count,
                order: paginationOptions.order,
            },
        })
            .then(resp => {
            resolve(resp.body);
        })
            .catch(err => reject((0, errors_1.handleError)(err)));
    });
}
exports.accountsDelegations = accountsDelegations;
async function accountsDelegationsAll(stakeAddress, allMethodOptions) {
    return (0, utils_1.paginateMethod)(pagination => this.accountsDelegations(stakeAddress, pagination), allMethodOptions);
}
exports.accountsDelegationsAll = accountsDelegationsAll;
async function accountsRegistrations(stakeAddress, pagination) {
    const paginationOptions = (0, utils_1.getPaginationOptions)(pagination);
    return new Promise((resolve, reject) => {
        this.instance(`accounts/${stakeAddress}/registrations`, {
            searchParams: {
                page: paginationOptions.page,
                count: paginationOptions.count,
                order: paginationOptions.order,
            },
        })
            .then(resp => {
            resolve(resp.body);
        })
            .catch(err => reject((0, errors_1.handleError)(err)));
    });
}
exports.accountsRegistrations = accountsRegistrations;
async function accountsRegistrationsAll(stakeAddress, allMethodOptions) {
    return (0, utils_1.paginateMethod)(pagination => this.accountsRegistrations(stakeAddress, pagination), allMethodOptions);
}
exports.accountsRegistrationsAll = accountsRegistrationsAll;
async function accountsAddresses(stakeAddress, pagination) {
    const paginationOptions = (0, utils_1.getPaginationOptions)(pagination);
    return new Promise((resolve, reject) => {
        this.instance(`accounts/${stakeAddress}/addresses`, {
            searchParams: {
                page: paginationOptions.page,
                count: paginationOptions.count,
                order: paginationOptions.order,
            },
        })
            .then(resp => {
            resolve(resp.body);
        })
            .catch(err => reject((0, errors_1.handleError)(err)));
    });
}
exports.accountsAddresses = accountsAddresses;
async function accountsAddressesAll(stakeAddress, allMethodOptions) {
    return (0, utils_1.paginateMethod)(pagination => this.accountsAddresses(stakeAddress, pagination), allMethodOptions);
}
exports.accountsAddressesAll = accountsAddressesAll;
async function accountsAddressesAssets(stakeAddress, pagination) {
    const paginationOptions = (0, utils_1.getPaginationOptions)(pagination);
    return new Promise((resolve, reject) => {
        this.instance(`accounts/${stakeAddress}/addresses/assets`, {
            searchParams: {
                page: paginationOptions.page,
                count: paginationOptions.count,
                order: paginationOptions.order,
            },
        })
            .then(resp => {
            resolve(resp.body);
        })
            .catch(err => reject((0, errors_1.handleError)(err)));
    });
}
exports.accountsAddressesAssets = accountsAddressesAssets;
async function accountsAddressesAssetsAll(stakeAddress, allMethodOptions) {
    return (0, utils_1.paginateMethod)(pagination => this.accountsAddressesAssets(stakeAddress, pagination), allMethodOptions);
}
exports.accountsAddressesAssetsAll = accountsAddressesAssetsAll;
async function accountsAddressesTotal(stakeAddress) {
    return new Promise((resolve, reject) => {
        this.instance(`accounts/${stakeAddress}/addresses/total`)
            .then(resp => {
            resolve(resp.body);
        })
            .catch(err => reject((0, errors_1.handleError)(err)));
    });
}
exports.accountsAddressesTotal = accountsAddressesTotal;
