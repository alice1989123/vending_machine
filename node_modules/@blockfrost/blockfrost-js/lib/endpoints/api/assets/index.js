"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.assetsPolicyByIdAll = exports.assetsPolicyById = exports.assetsAddresses = exports.assetsTransactions = exports.assetsHistoryAll = exports.assetsHistory = exports.assetsById = exports.assets = void 0;
const utils_1 = require("../../../utils");
const errors_1 = require("../../../utils/errors");
async function assets(pagination) {
    const paginationOptions = (0, utils_1.getPaginationOptions)(pagination);
    return new Promise((resolve, reject) => {
        this.instance(`assets`, {
            searchParams: {
                page: paginationOptions.page,
                count: paginationOptions.count,
                order: paginationOptions.order,
            },
        })
            .then(resp => {
            resolve(resp.body);
        })
            .catch(err => reject((0, errors_1.handleError)(err)));
    });
}
exports.assets = assets;
async function assetsById(asset) {
    return new Promise((resolve, reject) => {
        this.instance(`assets/${asset}`)
            .then(resp => {
            resolve(resp.body);
        })
            .catch(err => reject((0, errors_1.handleError)(err)));
    });
}
exports.assetsById = assetsById;
async function assetsHistory(asset, pagination) {
    const paginationOptions = (0, utils_1.getPaginationOptions)(pagination);
    return new Promise((resolve, reject) => {
        this.instance(`assets/${asset}/history`, {
            searchParams: {
                page: paginationOptions.page,
                count: paginationOptions.count,
                order: paginationOptions.order,
            },
        })
            .then(resp => {
            resolve(resp.body);
        })
            .catch(err => reject((0, errors_1.handleError)(err)));
    });
}
exports.assetsHistory = assetsHistory;
async function assetsHistoryAll(asset, allMethodOptions) {
    return (0, utils_1.paginateMethod)(pagination => this.assetsHistory(asset, pagination), allMethodOptions);
}
exports.assetsHistoryAll = assetsHistoryAll;
async function assetsTransactions(asset, pagination) {
    const paginationOptions = (0, utils_1.getPaginationOptions)(pagination);
    return new Promise((resolve, reject) => {
        this.instance(`assets/${asset}/transactions`, {
            searchParams: {
                page: paginationOptions.page,
                count: paginationOptions.count,
                order: paginationOptions.order,
            },
        })
            .then(resp => {
            resolve(resp.body);
        })
            .catch(err => reject((0, errors_1.handleError)(err)));
    });
}
exports.assetsTransactions = assetsTransactions;
async function assetsAddresses(asset, pagination) {
    const paginationOptions = (0, utils_1.getPaginationOptions)(pagination);
    return new Promise((resolve, reject) => {
        this.instance(`assets/${asset}/addresses`, {
            searchParams: {
                page: paginationOptions.page,
                count: paginationOptions.count,
                order: paginationOptions.order,
            },
        })
            .then(resp => {
            resolve(resp.body);
        })
            .catch(err => reject((0, errors_1.handleError)(err)));
    });
}
exports.assetsAddresses = assetsAddresses;
async function assetsPolicyById(policy, pagination) {
    const paginationOptions = (0, utils_1.getPaginationOptions)(pagination);
    return new Promise((resolve, reject) => {
        this.instance(`assets/policy/${policy}`, {
            searchParams: {
                page: paginationOptions.page,
                count: paginationOptions.count,
                order: paginationOptions.order,
            },
        })
            .then(resp => {
            resolve(resp.body);
        })
            .catch(err => reject((0, errors_1.handleError)(err)));
    });
}
exports.assetsPolicyById = assetsPolicyById;
async function assetsPolicyByIdAll(policy, allMethodOptions) {
    return (0, utils_1.paginateMethod)(pagination => this.assetsPolicyById(policy, pagination), allMethodOptions);
}
exports.assetsPolicyByIdAll = assetsPolicyByIdAll;
