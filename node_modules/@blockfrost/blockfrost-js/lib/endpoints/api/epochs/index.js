"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.epochsParameters = exports.epochsBlocksByPoolIdAll = exports.epochsBlocksByPoolId = exports.epochsBlocksAll = exports.epochsBlocks = exports.epochsStakesByPoolIdAll = exports.epochsStakesByPoolId = exports.epochsStakesAll = exports.epochsStakes = exports.epochsPrevious = exports.epochsNext = exports.epochsLatest = exports.epochs = void 0;
const utils_1 = require("../../../utils");
const errors_1 = require("../../../utils/errors");
async function epochs(number) {
    return new Promise((resolve, reject) => {
        this.instance(`epochs/${number}`)
            .then(resp => {
            resolve(resp.body);
        })
            .catch(err => {
            reject((0, errors_1.handleError)(err));
        });
    });
}
exports.epochs = epochs;
async function epochsLatest() {
    return new Promise((resolve, reject) => {
        this.instance(`epochs/latest`)
            .then(resp => {
            resolve(resp.body);
        })
            .catch(err => {
            reject((0, errors_1.handleError)(err));
        });
    });
}
exports.epochsLatest = epochsLatest;
async function epochsNext(number, pagination) {
    const paginationOptions = (0, utils_1.getPaginationOptions)(pagination);
    return new Promise((resolve, reject) => {
        this.instance(`epochs/${number}/next`, {
            searchParams: {
                page: paginationOptions.page,
                count: paginationOptions.count,
            },
        })
            .then(resp => {
            resolve(resp.body);
        })
            .catch(err => {
            reject((0, errors_1.handleError)(err));
        });
    });
}
exports.epochsNext = epochsNext;
async function epochsPrevious(number, pagination) {
    const paginationOptions = (0, utils_1.getPaginationOptions)(pagination);
    return new Promise((resolve, reject) => {
        this.instance(`epochs/${number}/previous`, {
            searchParams: {
                page: paginationOptions.page,
                count: paginationOptions.count,
            },
        })
            .then(resp => {
            resolve(resp.body);
        })
            .catch(err => {
            reject((0, errors_1.handleError)(err));
        });
    });
}
exports.epochsPrevious = epochsPrevious;
async function epochsStakes(number, pagination) {
    const paginationOptions = (0, utils_1.getPaginationOptions)(pagination);
    return new Promise((resolve, reject) => {
        this.instance(`epochs/${number}/stakes`, {
            searchParams: {
                page: paginationOptions.page,
                count: paginationOptions.count,
                order: paginationOptions.order,
            },
        })
            .then(resp => {
            resolve(resp.body);
        })
            .catch(err => {
            reject((0, errors_1.handleError)(err));
        });
    });
}
exports.epochsStakes = epochsStakes;
async function epochsStakesAll(number, allMethodOptions) {
    return (0, utils_1.paginateMethod)(pagination => this.epochsStakes(number, pagination), allMethodOptions);
}
exports.epochsStakesAll = epochsStakesAll;
async function epochsStakesByPoolId(number, poolId, pagination) {
    const paginationOptions = (0, utils_1.getPaginationOptions)(pagination);
    return new Promise((resolve, reject) => {
        this.instance(`epochs/${number}/stakes/${poolId}`, {
            searchParams: {
                page: paginationOptions.page,
                count: paginationOptions.count,
                order: paginationOptions.order,
            },
        })
            .then(resp => {
            resolve(resp.body);
        })
            .catch(err => {
            reject((0, errors_1.handleError)(err));
        });
    });
}
exports.epochsStakesByPoolId = epochsStakesByPoolId;
async function epochsStakesByPoolIdAll(number, poolId, allMethodOptions) {
    return (0, utils_1.paginateMethod)(pagination => this.epochsStakesByPoolId(number, poolId, pagination), allMethodOptions);
}
exports.epochsStakesByPoolIdAll = epochsStakesByPoolIdAll;
async function epochsBlocks(number, pagination) {
    const paginationOptions = (0, utils_1.getPaginationOptions)(pagination);
    return new Promise((resolve, reject) => {
        this.instance(`epochs/${number}/blocks`, {
            searchParams: {
                page: paginationOptions.page,
                count: paginationOptions.count,
                order: paginationOptions.order,
            },
        })
            .then(resp => {
            resolve(resp.body);
        })
            .catch(err => {
            reject((0, errors_1.handleError)(err));
        });
    });
}
exports.epochsBlocks = epochsBlocks;
async function epochsBlocksAll(number, allMethodOptions) {
    return (0, utils_1.paginateMethod)(pagination => this.epochsBlocks(number, pagination), allMethodOptions);
}
exports.epochsBlocksAll = epochsBlocksAll;
async function epochsBlocksByPoolId(number, poolId, pagination) {
    const paginationOptions = (0, utils_1.getPaginationOptions)(pagination);
    return new Promise((resolve, reject) => {
        this.instance(`epochs/${number}/blocks/${poolId}`, {
            searchParams: {
                page: paginationOptions.page,
                count: paginationOptions.count,
                order: paginationOptions.order,
            },
        })
            .then(resp => {
            resolve(resp.body);
        })
            .catch(err => {
            reject((0, errors_1.handleError)(err));
        });
    });
}
exports.epochsBlocksByPoolId = epochsBlocksByPoolId;
async function epochsBlocksByPoolIdAll(number, poolId, allMethodOptions) {
    return (0, utils_1.paginateMethod)(pagination => this.epochsBlocksByPoolId(number, poolId, pagination), allMethodOptions);
}
exports.epochsBlocksByPoolIdAll = epochsBlocksByPoolIdAll;
async function epochsParameters(number) {
    return new Promise((resolve, reject) => {
        this.instance(`epochs/${number}/parameters`)
            .then(resp => {
            resolve(resp.body);
        })
            .catch(err => {
            reject((0, errors_1.handleError)(err));
        });
    });
}
exports.epochsParameters = epochsParameters;
