"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.scriptsRedeemers = exports.scriptsDatum = exports.scriptsCbor = exports.scriptsJson = exports.scripts = exports.scriptsByHash = void 0;
const utils_1 = require("../../../utils");
const errors_1 = require("../../../utils/errors");
async function scriptsByHash(scriptHash) {
    return new Promise((resolve, reject) => {
        this.instance(`scripts/${scriptHash}`)
            .then(resp => {
            resolve(resp.body);
        })
            .catch(err => {
            reject((0, errors_1.handleError)(err));
        });
    });
}
exports.scriptsByHash = scriptsByHash;
async function scripts(pagination) {
    const paginationOptions = (0, utils_1.getPaginationOptions)(pagination);
    return new Promise((resolve, reject) => {
        this.instance(`scripts`, {
            searchParams: {
                page: paginationOptions.page,
                count: paginationOptions.count,
                order: paginationOptions.order,
            },
        })
            .then(resp => {
            resolve(resp.body);
        })
            .catch(err => {
            reject((0, errors_1.handleError)(err));
        });
    });
}
exports.scripts = scripts;
async function scriptsJson(scriptHash) {
    return new Promise((resolve, reject) => {
        this.instance(`scripts/${scriptHash}/json`)
            .then(resp => {
            resolve(resp.body);
        })
            .catch(err => {
            reject((0, errors_1.handleError)(err));
        });
    });
}
exports.scriptsJson = scriptsJson;
async function scriptsCbor(scriptHash) {
    return new Promise((resolve, reject) => {
        this.instance(`scripts/${scriptHash}/cbor`)
            .then(resp => {
            resolve(resp.body);
        })
            .catch(err => {
            reject((0, errors_1.handleError)(err));
        });
    });
}
exports.scriptsCbor = scriptsCbor;
async function scriptsDatum(datumHash) {
    return new Promise((resolve, reject) => {
        this.instance(`scripts/datum/${datumHash}`)
            .then(resp => {
            resolve(resp.body);
        })
            .catch(err => {
            reject((0, errors_1.handleError)(err));
        });
    });
}
exports.scriptsDatum = scriptsDatum;
async function scriptsRedeemers(scriptHash) {
    return new Promise((resolve, reject) => {
        this.instance(`scripts/${scriptHash}/redeemers`)
            .then(resp => {
            resolve(resp.body);
        })
            .catch(err => {
            reject((0, errors_1.handleError)(err));
        });
    });
}
exports.scriptsRedeemers = scriptsRedeemers;
