"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.pinRemove = exports.listByPath = exports.list = exports.pin = exports.gateway = exports.add = void 0;
const errors_1 = require("../../utils/errors");
const utils_1 = require("../../utils");
const form_data_1 = __importDefault(require("form-data"));
const fs_1 = __importDefault(require("fs"));
async function add(path) {
    const stream = fs_1.default.createReadStream(path);
    const data = new form_data_1.default();
    data.append('file', stream);
    return new Promise((resolve, reject) => {
        this.instance
            .post(`ipfs/add`, {
            body: data,
            headers: {
                'Content-Type': `multipart/form-data; boundary=${data.getBoundary()}`,
            },
        })
            .then(resp => {
            resolve(resp.body);
        })
            .catch(err => {
            reject((0, errors_1.handleError)(err));
        });
    });
}
exports.add = add;
async function gateway(path) {
    return new Promise((resolve, reject) => {
        this.instance
            .get(`ipfs/gateway`, {
            searchParams: { path },
        })
            .then(resp => {
            resolve(resp.body);
        })
            .catch(err => {
            reject((0, errors_1.handleError)(err));
        });
    });
}
exports.gateway = gateway;
async function pin(path) {
    return new Promise((resolve, reject) => {
        this.instance
            .post(`ipfs/pin/add/${path}`)
            .then(resp => {
            resolve(resp.body);
        })
            .catch(err => {
            reject((0, errors_1.handleError)(err));
        });
    });
}
exports.pin = pin;
async function list(pagination) {
    const paginationOptions = (0, utils_1.getPaginationOptions)(pagination);
    return new Promise((resolve, reject) => {
        this.instance(`ipfs/pin/list`, {
            searchParams: {
                page: paginationOptions.page,
                count: paginationOptions.count,
                order: paginationOptions.order,
            },
        })
            .then(resp => {
            resolve(resp.body);
        })
            .catch(err => {
            reject((0, errors_1.handleError)(err));
        });
    });
}
exports.list = list;
async function listByPath(path) {
    return new Promise((resolve, reject) => {
        this.instance(`ipfs/pin/list/${path}`)
            .then(resp => {
            resolve(resp.body);
        })
            .catch(err => {
            reject((0, errors_1.handleError)(err));
        });
    });
}
exports.listByPath = listByPath;
async function pinRemove(path) {
    return new Promise((resolve, reject) => {
        this.instance
            .post(`ipfs/pin/remove/${path}`)
            .then(resp => {
            resolve(resp.body);
        })
            .catch(err => {
            reject((0, errors_1.handleError)(err));
        });
    });
}
exports.pinRemove = pinRemove;
