import { ParseAssetResult } from '../types/utils';
/**
 * Derives an address with derivation path m/1852'/1815'/account'/role/addressIndex
 * If role === 2 then it returns a stake address (m/1852'/1815'/account'/2/addressIndex)
 *
 * @Returns {address: string, path: number[] } An object with bech32 address and corresponding partial derivation path {address: string, path: [role, addressIndex]}
 * */
export declare const deriveAddress: (accountPublicKey: string, role: number, addressIndex: number, isTestnet: boolean, isByron?: boolean) => {
    address: string;
    path: [number, number];
};
export declare const hexToString: (input: string) => string;
export declare const getFingerprint: (policyId: string, assetName?: string) => string;
export declare const parseAsset: (hex: string) => ParseAssetResult;
/**
 * Verifies webhook signature
 *
 * @param {string|Buffer} webhookPayload Buffer or stringified payload of the webhook request.
 * @param {string|Buffer} signatureHeader Blockfrost-Signature header.
 * @param {string} secret Auth token for the webhook.
 * @param {number} [timestampToleranceSeconds=600] Time tolerance affecting signature validity. By default signatures older than 600s are considered invalid.
 * @returns {boolean} Whether the signature is valid.
 * */
export declare const verifyWebhookSignature: (webhookPayload: unknown, signatureHeader: string | string[], secret: string, timestampToleranceSeconds?: number) => boolean;
